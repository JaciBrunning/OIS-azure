plugins {
  id 'maven-publish'
  id "edu.wpi.first.GradleRIO" version "2019.1.1"
  id 'cpp'
  id 'base'
}

import edu.wpi.first.gradlerio.wpi.WPINativeCompileRules

if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
  apply plugin: 'objective-cpp'
  // No arc
  WPINativeCompileRules.macObjCppLinkerArgs[2] = '-fno-objc-arc'
}


apply from: 'publishingtools.gradle'
apply from: 'vendordeps.gradle'

group = 'thirdparty.ois'
version = '1.0.0-a'

task prepare_prereqs() {
  def from = file('OIS/includes/OISPrereqs.h.in')
  def into = file('OIS/includes/OISPrereqs.h')

  def replace_map = [
    OIS_MAJOR_VERSION: 1,
    OIS_MINOR_VERSION: 5,
    OIS_PATCH_VERSION: 0,
    OIS_SOVERSION: '1.5.0'
  ]

  def content = from.text
  replace_map.each { k, v ->
    content = content.replaceAll("@${k}@".toString(), v.toString())
  }

  into.text = content
}

model {
  components {
    ois(NativeLibrarySpec) {
      targetPlatform wpi.platforms.desktop

      binaries.all {
        def mac = targetPlatform.operatingSystem.isMacOsX()
        def linux = targetPlatform.operatingSystem.isLinux()
        def windows = targetPlatform.operatingSystem.isWindows()

        sources {
          ois(mac ? ObjectiveCppSourceSet : CppSourceSet) {
            source {
              srcDir 'OIS/src'
              include '*.cpp'
              if (mac) {
                include 'mac/*.cpp', 'mac/*.mm'
              } else if (windows) {
                include 'win32/*.cpp'
              } else if (linux) {
                include 'linux/*.cpp'
              }
            }
            exportedHeaders {
              srcDir 'OIS/includes'
            }
          }
        }

        if (mac) {
          linker.args << '-framework' << 'Foundation'
          linker.args << '-framework' << 'IOKit'
          linker.args << '-framework' << 'Cocoa'
          linker.args << '-framework' << 'Carbon'
        } else if (windows) {
          cppCompiler.define 'OIS_WIN32_XINPUT_SUPPORT'
          cppCompiler.define 'OIS_NONCLIENT_BUILD'
          linker.args << 'xinput.lib' << 'user32.lib' << 'ws2_32.lib' << 'dinput8.lib' << 'dxguid.lib' << 'ole32.lib'
        }

        if (it instanceof SharedLibraryBinarySpec) {
          cppCompiler.define 'OIS_DYNAMIC_LIB'
        }

        it.tasks.all {
          it.dependsOn prepare_prereqs
        }
      }
    }
  }
}

task zipHeaders(type: Zip) {
  from fileTree('OIS/includes')

  classifier = 'headers'
}

publishing {
  publications {
    ois(MavenPublication) {
      artifactId "OIS"

      artifact zipHeaders {
          classifier 'headers'
      }

      binaryArtifacts(it, 'ois')
    }
  }
}

wrapper {
  gradleVersion = 5.0
}